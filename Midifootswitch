#include <LcdBarGraphX.h>
#include <LiquidCrystal.h>
#include <LiquidCrystal_I2C.h>
#include <Encoder.h>
#include <Control_Surface.h> 
USBMIDI_Interface usbmidi;    
#include <Arduino_Helpers.h> // Include the Arduino Helpers library.
#include <AH/Containers/ArrayHelpers.hpp>
#include <AH/Hardware/Button.hpp>
#include <AH/Hardware/ExtendedInputOutput/AnalogMultiplex.hpp>
#include <AH/Hardware/ExtendedInputOutput/SPIShiftRegisterOut.hpp>

const int speedMultiplier = 1;  // Encoder

byte lcdNumCols = 20;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); 

LcdBarGraphX lbg0(&lcd, 4, 0, 0); // -- First line at column 0
LcdBarGraphX lbg1(&lcd, 4, 5, 0); // -- First line at column 5
LcdBarGraphX lbg2(&lcd, 4, 10, 0); // -- First line at column 10
LcdBarGraphX lbg3(&lcd, 4, 0, 1); // -- Second line at column 0




Bank<8> bankpedal(4); 
Bank<8> bankamp(4);  


CD74HC4067 mux2 = {
  8,           
  {9, 10, 11, 12}, 
 
};

CCButtonLatched futton [] = {          
  { mux2.pin(0), { 77, CHANNEL_1 } },    
  { mux2.pin(1), { 81, CHANNEL_2 } }, 
  { mux2.pin(2), { 85, CHANNEL_3 } },                                                   
  { mux2.pin(3), { 89, CHANNEL_4 } },
  { mux2.pin(4), { 93, CHANNEL_5 } },
  { mux2.pin(5), { 97, CHANNEL_6 } },
  { mux2.pin(6), { 101, CHANNEL_7 } },
  { mux2.pin(7), { 105, CHANNEL_8 } },
 }; 


CCButtonLatched futton2 [] = {  
  { mux2.pin(8), { 84, CHANNEL_1 } },    
  { mux2.pin(9), { 86, CHANNEL_2 } }, 
  { mux2.pin(10), { 87, CHANNEL_3 } },                                                   
  { mux2.pin(11), { 88, CHANNEL_4 } },
  { mux2.pin(12), { 90, CHANNEL_5 } },
  { mux2.pin(13), { 91, CHANNEL_6 } },
  { mux2.pin(14), { 92, CHANNEL_7 } },
  { mux2.pin(15), { 94, CHANNEL_8 } },

};


CD74HC4067 mux3 = {
  A15,            
  {A14, A13, A12, A11}, 
  
};

const int i0 = mux3.pin(8);
const int i1 = mux3.pin(9);
const int i2 = mux3.pin(10);
const int i3 = mux3.pin(11);

CCPotentiometer pots3 [] = {

  {mux3.pin(4), 74},
  {mux3.pin(5), 75},
  {mux3.pin(6), 76},
  {mux3.pin(7), 78},
  {mux3.pin(12), 79},
  {mux3.pin(13), 80},
  {mux3.pin(14), 82},
  {mux3.pin(15), 83},
  

};

Bankable::CCButtonLatched<8>  bankbuttons [] = {  
  { bankpedal, 7, 77, },  
  //{ bankpedal, 6, 91, },
  };

Bankable::CCPotentiometer pots[] = {   
  
  {bankamp, mux3.pin(8), 1},
  {bankamp, mux3.pin(9), 3},
  {bankamp, mux3.pin(10), 4},
  {bankamp, mux3.pin(11), 6},

  };
 
Bankable::CCPotentiometer pots2[] = {    
  
  {bankpedal, mux3.pin(0), 37},
  {bankpedal, mux3.pin(1), 38},
  {bankpedal, mux3.pin(2), 39},
  {bankpedal, mux3.pin(3), 40},

  };
IncrementDecrementSelectorLEDs<8> bankSelector = {   
  bankpedal,
  {5, 6},         // button pins
  {30, 31, 32, 33, 34, 35, 36, 37}, // LED pins
  }; 

IncrementDecrementSelectorLEDs<8> bankSelector2 = {   
  bankamp,
  {18, 19},         // button pins
  {38, 43, 44, 41, 42, 39, 40, 45}, // LED pins
  };

CCRotaryEncoder enc = {
  
  {18, 19},                                // pins
  76,                                     // address
  speedMultiplier,                       // multiplier
  4,                                     // pulses per click
};


const pin_t ledPins[] = { 22, 23, 24, 25, 26, 27, 28, 29 };

template <class T, size_t N> constexpr size_t length(T (&)[N]) { return N; }

static_assert(length(futton) == length(ledPins),
              "Error: requires same number of buttons as LEDs");


void setup() {

    Control_Surface.begin();
 for (auto pin : ledPins)  // Set the pinMode to output for all LEDs
      pinMode(pin, OUTPUT);

  // -- initializing the LCD
  lcd.begin(4, lcdNumCols);
  lcd.clear();
  lcd.begin(4, lcdNumCols);
  lcd.clear();
  lcd.begin(4, lcdNumCols);
  delay(150);
  lcd.clear();
  lcd.begin(4, lcdNumCols);
  delay(100);
  lcd.clear();
  lcd.begin(4, lcdNumCols);
  delay(150);
  lcd.clear();
  lcd.begin(4, lcdNumCols);
  lcd.setCursor(0,1);
  lcd.print ("Al loro.......");
  delay(1000);
  lcd.setCursor (5,3);
  lcd.print ("NENES...NENAS..");
  delay(800);
  lcd.clear();
  lcd.setCursor(1,2);
  lcd.print ("ELSEREBROLABESTIA");
  delay(800);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print ("LA PEDALERA USB MIDI");
  delay(500);
  lcd.setCursor(1,3);
  lcd.print ("Del Tio Elias");
  delay(1000);
  lcd.clear();
  lcd.setCursor(2,0);
  lcd.print ("YA ESTA AQUI!");
  delay(800);
  lcd.clear();
   lcd.setCursor(12,0);
  lcd.print ("jar");
  delay(500);
  lcd.clear();
 


 }

void loop() {
  // put your main code here, to run repeatedly:
  Control_Surface.loop();
 for (size_t i = 0; i < length(futton); ++i)
      // Update the LED states to reflect the toggled switch states
      digitalWrite(ledPins[i], futton[i].getState() ? LOW : HIGH);

  lbg0.drawValue( analogRead(i0), 1023);
  lbg1.drawValue( analogRead(i1), 1023);
  lbg2.drawValue( analogRead(i2), 1023);
  lbg3.drawValue( analogRead(i3), 1023);
delay(100);
 }

